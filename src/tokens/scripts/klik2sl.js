// transform colors from klik notation to sl notation

import { readFileSync, writeFileSync } from 'fs';
import { join } from 'path';

const hexToRgb = hex =>
  hex
    .replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, (m, r, g, b) => '#' + r + r + g + g + b + b)
    .substring(1)
    .match(/.{2}/g)
    .map(x => parseInt(x, 16));

const obj = JSON.parse(readFileSync(join('./raw', 'klik-colors.json')).toString());

let out = [];

out.push('// autogenerated by src/tokens/klik2sl.js');
out.push("import { css } from 'lit';");
out.push('');
out.push('export default css`');
out.push(':root {');

out.push('/*');
out.push(' * Global DT Color Primitives');
out.push(' */');

// /* Blue Gray */
// --klik-color-blue-gray-50: 248 250 252;
// `;

const colors = obj.colors;

Object.keys(colors).forEach(color => {
  // console.log(color, colors[color]['500'], hexToRgb(colors[color]['500']));

  out.push(' ');
  out.push(`/* ${color} */`);

  const shades = colors[color];
  Object.keys(shades).forEach(shade => {
    const hex = shades[shade];
    const rgb = hexToRgb(hex).join(' ');
    // console.log(colors[color], shades[shade], hex, rgb);
    out.push(`--dt-global-klik-color-${color}-${shade}: ${rgb};`);
  });
});

out.push(' ');
out.push(`--dt-global-klik-color-black: 10 10 10;`);
out.push(`--dt-global-klik-color-white: 255 255 255;`);

out.push('}');
out.push('`;');
out.push(' ');

const css = out.join('\n');
console.log(css);

writeFileSync(join('../../themes', 'dt-global-klik-colors.styles.ts'), css);
